# raw swagger spec link:
# https://raw.githubusercontent.com/GluuFederation/oxAuth/master/docs/oxAuth_swagger.yaml
# https://gluu.org/swagger-ui/?url=https://raw.githubusercontent.com/GluuFederation/oxAuth-server/version_4.0/oxAuth/master/docs/oxAuth_swagger.yaml#/developers/setup-client
openapi: 3.0.1
info:
  title: oxAuth
  description: oxAuth - Authorization services
  contact:
    email: yuriyz@gluu.org
  license:
    name: License
    url: https://github.com/GluuFederation/oxAuth/blob/master/LICENSE
  version: "4.2"
servers:

- url: https://gluu.org/
tags:
- name: developers
  description: oxAuth is an open source OpenID Connect Provider (OP) and UMA Authorization Server (AS). The project also includes OpenID Connect Client code which can be used by websites to validate tokens.oxAuth currently implements all required aspects of the OpenID Connect stack, including an OAuth 2.0 authorization server, Simple Web Discovery, Dynamic Client Registration, JSON Web Tokens, JSON Web Keys, and User Info Endpoint.oxAuth is tightly coupled with oxTrust.
   
paths:
  /authorize:
    get:
      tags:
      - Authorization
      summary: The Authorization Endpoint performs Authentication of the End-User. 
      description: End-User Authentication and Authorization done by sending the User Agent to the Authorization Endpoint using request parameters defined by OAuth 2.0 and OpenID Connect.
      operationId: get_authorize     
      parameters:
        - name: scope
          in: query
          required: true
          description: OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. 
          schema:
            type : string
        - name: response_type
          in: query
          required: true
          description: OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used.
          schema:
            type : string
        - name: client_id
          in: query
          required: true
          description: OAuth 2.0 Client Identifier valid at the Authorization Server.
          schema:
            type : string            
        - name: redirect_uri
          in: query
          required: true
          description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider.
          schema:
            type : string
        - name: state
          in: query
          required: false
          description: Opaque value used to maintain state between the request and the callback.
          schema:
            type : string
        - name: response_mode
          in: query
          required: false
          description: Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint.
          schema:
            type : string
        - name: nonce
          in: query
          required: false
          description: String value used to associate a Client session with an ID Token, and to mitigate replay attacks. 
          schema:
            type : string
        - name: display
          in: query
          required: false
          description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.
          schema:
            type : string 
        - name: prompt
          in: query
          required: false
          description: Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The defined values are - none, login, consent, select_account.
          schema:
            type : string  
        - name: max_age
          in: query
          required: false
          description: Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP.
          schema:
            type : integer  
        - name: ui_locales
          in: query
          required: false
          description: End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. 
          #example: \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).
          schema:
            type : string
        - name: id_token_hint
          in: query
          required: false
          description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response.
          schema:
            type : string
        - name: login_hint
          in: query
          required: false
          description: Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). 
          schema:
            type : string
        - name: acr_values
          in: query
          required: false
          description: Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference.
          schema:
            type : string
        - name: amr_values
          in: query
          required: false
          description: AMR Values.
          schema:
            type : string
        - name: request
          in: query
          required: false
          description: This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value. It represents the request as a JWT whose Claims are the request parameters.
          schema:
            type : string
        - name: request_uri
          in: query
          required: false
          description: This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.
          schema:
            type : string
        - name: request_session_id
          in: query
          required: false
          description: Request session id.
          schema:
            type : string
        - name: session_id
          in: query
          required: false
          description: Session id of this call.
          schema:
            type : string
        - name: origin_headers
          in: query
          required: false
          description: Origin headers. Used in custom workflows.
          schema:
            type : string
        - name: code_challenge
          in: query
          required: false
          description: PKCE code challenge.
          schema:
            type : string
        - name: code_challenge_method
          in: query
          required: false
          description: PKCE code challenge method.
          schema:
            type : string
        - name: custom_response_headers
          in: query
          required: false
          description: Custom Response Headers.
          schema:
            type : string
        - name: claims
          in: query
          required: false
          description: Requested Claims.
          schema:
            type : string
        - name: auth_req_id
          in: query
          required: false
          description: CIBA authentication request Id.
          schema:
            type : string
      responses:
        200:
          description: OK
          content: {}
        400:
          $ref: '#/components/responses/InvalidRequest'        
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError' 
    post:
      tags:
      - Authorization
      summary: The Authorization Endpoint performs Authentication of the End-User. 
      description: End-User Authentication and Authorization done by sending the User Agent to the Authorization Endpoint using request parameters defined by OAuth 2.0 and OpenID Connect.
      operationId: post_authorize
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - scope
              - response_type
              - client_id
              - redirect_uri
              properties:
                scope:
                  type : string
                  description: OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. 
                response_type:
                  type : string
                  description: OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used.
                client_id:
                  type : string
                  description: OAuth 2.0 Client Identifier valid at the Authorization Server.
                redirect_uri:
                  type : string
                  description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider.
                state:
                  type : string
                  description: Opaque value used to maintain state between the request and the callback.
                response_mode:
                  type : string
                  description: Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint.
                nonce:
                  type : string
                  description: String value used to associate a Client session with an ID Token, and to mitigate replay attacks. 
                display:
                  type : string
                  description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.
                prompt:
                  type : string
                  description: Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. 
                max_age:
                  type : integer 
                  description: Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP.
                ui_locales:
                  type : string
                  description: End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. 
                  example: \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).
                id_token_hint:
                  type : string
                  description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response.
                login_hint:
                  type : string
                  description: Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). 
                acr_values:
                  type : string
                  description: Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference.
                amr_values:
                  type : string
                  description: AMR Values.
                request:
                  type : string
                  description: This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value. It represents the request as a JWT whose Claims are the request parameters.
                request_uri:
                  type : string
                  description: This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.
                request_session_id:
                  type : string
                  description: Request session id.
                session_id:
                  type : string
                  description: Session id of this call.
                origin_headers:
                  type : string
                  description: Origin headers. Used in custom workflows.
                code_challenge:
                  type : string
                  description: PKCE code challenge.
                code_challenge_method:
                  type : string
                  description: PKCE code challenge method.
                custom_response_headers:
                  type : string
                  description: Custom Response Headers.
                claims:
                  type : string
                  description: Requested Claims.
      responses:
        200:
          description: OK
          content: {}
        400:
          $ref: '#/components/responses/InvalidRequest'        
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError' 
  /bc-authorize:
    post:
      tags:
      - Authorization
      summary: Performs backchannel authorization of the end-user.
      description: The Backchannel Authentication Endpoint is used to initiate an out-of-band authentication of the end-user.
      operationId: bc-authorize
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - client_id
              - scope
              - client_notification_token
              properties:
                client_id:
                  type : string
                  description: OAuth 2.0 Client Identifier valid at the Authorization Server.                  
                scope:
                  type : string
                  description: CIBA authentication requests must contain the openid scope value.
                client_notification_token:
                  type : string
                  description: It is a bearer token provided by the Client that will be used by the OpenID Provider to authenticate the callback request to the Client. It is required if the Client is registered to use Ping or Push modes.
                acr_values:
                  type : string
                  description: Requested Authentication Context Class Reference values.
                login_hint_token:
                  type : string
                  description: A token containing information identifying the end-user for whom authentication is being requested.
                id_token_hint:
                  type : string
                  description: An ID Token previously issued to the Client by the OpenID Provider being passed back as a hint to identify the end-user for whom authentication is being requested.
                login_hint:
                  type : string
                  description: A hint to the OpenID Provider regarding the end-user for whom authentication is being requested.
                binding_message:
                  type : string
                  description: A human readable identifier or message intended to be displayed on both the consumption device and the authentication device to interlock them together for the transaction by way of a visual cue for the end-user.
                user_code:
                  type : string
                  description: A secret code, such as password or pin, known only to the user but verifiable by the OP.
                requested_expiry:
                  type : integer
                  description: A positive integer allowing the client to request the expires_in value for the auth_req_id the server will return.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: Backchannel Authorization
                required:
                - AUTH_REQ_ID
                - EXPIRES_IN
                - INTERVAL
                type: object
                properties:
                  AUTH_REQ_ID:
                    type: string
                  EXPIRES_IN:
                    type: integer
                  INTERVAL:
                    type: integer      
        400:
          $ref: '#/components/responses/InvalidRequest'     
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/AccessDenied'
  /bc-deviceRegistration:
    post:
      tags:
      - Registration
      summary: Performs backchannel device registration.
      description: Performs backchannel device registration.
      operationId: bc-deviceRegistration
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - id_token_hint
              - device_registration_token
              properties:
                id_token_hint:
                  type : string
                  description: An ID Token previously issued to the Client by the OpenID Provider being passed back as a hint to identify the end-user for whom the device registration is being requested.
                device_registration_token:
                  type : string
                  description: OAuth 2.0 Client Identifier valid at the Authorization Serve
      responses:
        200:
          description: OK
          content: {}         
        400:
          $ref: '#/components/responses/InvalidRequest'         
        403:
          $ref: '#/components/responses/AccessDenied'          
  /clientinfo:
    get:
      tags:
      - Client Info
      summary: To get Claims details about the registered client.
      description: The ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.
      operationId: get_clientinfo
      parameters:
      - name: access_token
        in: query
        schema:
          type : string 
          description: Client-specific access token.
      - name: Authorization
        in: header
        schema:
          type : string          
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: Client details in response.
                $ref: '#/components/schemas/ClientInfoResponse'                      
        400:
          $ref: '#/components/responses/InvalidRequest'       
    post:
      tags:
      - Client Info
      summary: To get Claims details about the registered client.
      description: The ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.
      operationId: post_clientinfo
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - access_token
              properties:
                access_token:
                  type : string
                  description: Client-specific access token.
      parameters:
      - name: Authorization
        in: header
        schema:
          type : string          
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: Client details in response.
                $ref: '#/components/schemas/ClientInfoResponse'                      
        400:
          $ref: '#/components/responses/InvalidRequest'            
  /.well-known/gluu-configuration:
    post:
      tags:
      - Server Configuration
      summary:  Gets GluuServer configuration data that contains non-standard OpenID Connect discovery metadata.
      description: Gets GluuServer configuration data that contains non-standard OpenID Connect discovery metadata.
      operationId: well-known-gluu-configuration      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: GluuConfigurationResponse
                description: Client GluuAttribute by Dn(Distinguished Name) based on Authorization Scope.                                         
                required:
                - id_generation_endpoint
                - introspection_endpoint
                type: object
                properties:
                  id_generation_endpoint:
                    type: string
                  introspection_endpoint:
                    type: string
                  auth_level_mapping:
                    type: object
                    additionalProperties:
                      type: string
                      description: Additional Custom Acr's map object 
                  scope_to_claims_mapping:
                    type: object
                    additionalProperties:
                      type: string
                      description: Scope map object
        500:
          $ref: '#/components/responses/InternalServerError'       
  /introspection:
    get:
      tags:
      -  Token
      summary: The Introspection OAuth 2 Endpoint.
      description: The Introspection OAuth 2 Endpoint.
      operationId: get-introspection
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string
          example: Bearer 23410913-abewfq.123483
        - name: token
          in: query
          required: true    
          schema:
            type : string
          example: token=2YotnFZFEjr1zCsicMWpAA
        - name: token_type_hint
          in: query
          required: true
          description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User.            
          schema:
            type : string
        - name: response_as_jwt
          in: query
          required: false
          description: OPTIONAL. Boolean value with default value false. If true, returns introspection response as JWT (signed based on client configuration used for authentication to Introspection Endpoint).
          schema:
            type : string 
          example: response_as_jwt=false  
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: IntrospectionResponse
                description: meta-information about token
                required:
                - active
                - exp
                - iat
                - acr_values
                - scope      
                - client_id
                - sub      
                - username
                - iss
                - aud
                - token_type
                type: object
                properties:
                 active:
                   type: boolean
                   example: true
                 exp:
                   type: integer
                   description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.
                 iat:
                   type: integer
                   example: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued. 
                 acr_values:
                   type: string
                 scope:
                   type: array
                   description: Provide list of scopes to which access was granted for this resource.
                   example:
                   - read write dolphin
                   items:
                     type: string         
                 client_id:
                   type: string
                   example: 1238j323ds-23ij4
                 sub:
                   type: string
                   example: Z5O3upPC88QrAjx00dis
                   description: Subject of the token, as defined in JWT [RFC7519].           
                 username:
                   type: string
                   example: jdoe
                 iss:
                   type: string
                   example: https://server.example.com/
                   description: String representing the issuer of this token, as defined in JWT [RFC7519].           
                 aud:
                   type: string
                   example: https://protected.example.net/resource
                   description: Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519]. 
                 token_type:
                   type: string
                   example: bearer, mac
                   description: Type of the token as defined in Section 5.1 of OAuth 2.0 [RFC6749].               
        400:
         $ref: '#/components/responses/InvalidRequest'   
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError' 
    post:
      tags:
      - Token
      summary: The Introspection OAuth 2 Endpoint.
      description: The Introspection OAuth 2 Endpoint.
      operationId: post-introspection      
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - token
              - token_type_hint
              - response_as_jwt
              properties:
                token:
                  type : string
                  description: Client access token.
                  example: token=2YotnFZFEjr1zCsicMWpAA
                token_type_hint:
                  type : string  
                  description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User.
                response_as_jwt:
                  type : string
                  description: OPTIONAL. Boolean value with default value false. If true, returns introspection response as JWT (signed based on client configuration used for authentication to Introspection Endpoint).
                  example: response_as_jwt=false
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.  
          schema:
            type : string 
          example: Bearer 23410913-abewfq.123483            
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: IntrospectionResponse
                description: meta-information about token
                required:
                - active
                - exp
                - iat
                - acr_values
                - scope      
                - client_id
                - sub      
                - username
                - iss
                - aud
                - token_type
                type: object
                properties:
                 active:
                   type: boolean
                   example: true
                 exp:
                   type: integer
                   description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.
                 iat:
                   type: integer
                   example: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued. 
                 acr_values:
                   type: string
                 scope:
                   type: array
                   description: Provide list of scopes to which access was granted for this resource.
                   example:
                   - read write dolphin
                   items:
                     type: string         
                 client_id:
                   type: string
                   example: 1238j323ds-23ij4
                 sub:
                   type: string
                   example: Z5O3upPC88QrAjx00dis
                   description: Subject of the token, as defined in JWT [RFC7519].           
                 username:
                   type: string
                   example: jdoe
                 iss:
                   type: string
                   example: https://server.example.com/
                   description: String representing the issuer of this token, as defined in JWT [RFC7519].           
                 aud:
                   type: string
                   example: https://protected.example.net/resource
                   description: Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519]. 
                 token_type:
                   type: string
                   example: bearer, mac
                   description: Type of the token as defined in Section 5.1 of OAuth 2.0 [RFC6749].               
        400:
         $ref: '#/components/responses/InvalidRequest'   
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError' 
  /jwks:
    get:
      tags:
      - JWK - JSON Web Key Set (JWKs)
      summary: A JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627].
      description: Provides list of JWK used by server. 
      operationId: jwks      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: WebKeysConfiguration
                required:
                - keys
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: string
                    description: Each property in the key is defined by the JWK specification RFC 7517 Section 4 or, for algorithm-specific properties, in RFC 7518]
                    example: '{"keys": [{"key1": "value1", "key2": "value2"}] }'                   
        500:
          $ref: '#/components/responses/InternalServerError'


#WIP to  TODO- need to add all attributes as in RegisterRequestParam and move schema objects in-line        
  /register: 
    post:
      tags:
      - Registration
      summary: Registers new client dynamically.
      description: The Client Registration Endpoint is an OAuth 2.0 Protected Resource through which a new Client registration can be requested.
      operationId: post-register
      requestBody:
        content:
          application/json:
            schema:
              title: RegisterParams # ToDO- need to add all attributes as in RegisterRequestParam
              required:
              - redirect_uris
              type: object
              properties:
                software_statement:
                  type: string
                  description:  A software statement containing client metadata values about the client software as claims.
                
                redirect_uris:
                  type: array
                  description: Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request
                  items:
                    type: string
                  example:
                  - https://client.example.org/cb
                claims_redirect_uri:
                  type: array
                  description: Array of The Claims Redirect URIs to which the client wishes the authorization server to directthe requesting party's user agent after completing its interaction.
                  items:
                    type: string
                response_types: 
                  type: array
                  description: A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token
                  items:
                    type: string
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Access Token that is used at the Client Configuration Endpoint   
          schema:
            type : string      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: ClientResponse
                $ref: '#/components/schemas/ClientResponse'                                        
        400:
          $ref: '#/components/responses/InvalidRequest'                       
        500:
          $ref: '#/components/responses/InternalServerError'  
    put:
      tags:
      - Registration
      summary: Updates the client info for a previously registered client.
      description: The Client Registration Endpoint to update Client Metadata for a previously registered client.
      operationId: put-register
      requestBody:
        content:
          application/json:
            schema:
              title: RegisterParams
              required:
              - redirect_uris
              type: object
              properties:
                redirect_uris:
                  type: array
                  description: Request parameters as JSON object with data described by Connect Client Registration Specification..
                  example:
                  - https://client.example.org/cb
                  items:
                    type: string
      parameters:
        - name: client_id
          in: query
          required: true
          description: Client ID that identifies client that must be updated by this request.   
          schema:
            type : string  
        - name: Authorization
          in: header
          required: true
          description: Access Token that is used at the Client Configuration Endpoint   
          schema:
            type : string      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: ClientResponse
                $ref: '#/components/schemas/ClientResponse'                                        
        400:
          $ref: '#/components/responses/InvalidRequest'                       
        500:
          $ref: '#/components/responses/InternalServerError'          
    get:
      tags:
      - Registration
      summary: Get client information for a previously registered client.
      description: Reads client info.The Client Registration Endpoint to retrieve the Client Metadata for a previously registered client.
      operationId: get-register
      parameters:
        - name: client_id
          in: query
          required: true
          description: Client ID that identifies client.  
          schema:
            type : string      
        - name: Authorization
          in: header
          required: true
          description: Access Token that is used at the Client Configuration Endpoint   
          schema:
            type : string      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: ClientResponse
                $ref: '#/components/schemas/ClientResponse'                                        
        401:
          $ref: '#/components/responses/InvalidRequest'
        500:
          $ref: '#/components/responses/InternalServerError'   
    delete:
      tags:
      - Client Registration
      summary: Deletes the client info for a previously registered client.
      description: The Client Registration Endpoint removes the Client Metadata for a previously registered client.
      operationId: delete-register
      parameters:
        - name: client_id
          in: query
          required: true
          description: Client ID that identifies client.  
          schema:
            type : string      
        - name: Authorization
          in: header
          required: true
          description: Access Token that is used at the Client Configuration Endpoint   
          schema:
            type : string      
      responses:
        204:
          description: OK
          content: {}                                      
        400:
          $ref: '#/components/responses/InvalidRequest'
        401:
          $ref: '#/components/responses/Unauthorized'          
        500:
          $ref: '#/components/responses/InternalServerError'           
  /revoke:
    post:
      tags:
      - Token
      summary: Revoke an Access Token or a Refresh Token, the RP (Client).
      description: Revoke an Access Token or a Refresh Token, the RP (Client).
      operationId: revoke
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - token
              - token_type_hint
              properties:
                token:
                  type : string
                  description: The token that the client wants to get revoked.
                token_type_hint:
                  type : string
                  description: A hint about the type of the token submitted for revocation.
      responses:
        200:
          description: OK
          content:
            content: {}                      
        400:
          $ref: '#/components/responses/InvalidRequest'
  /session_status:
    get:
      tags:
      - Session Management
      summary: Determine current sesion status.
      description: Determine current sesion status.
      operationId: session_status      
      responses:
        200:
          description: OK
          content: {}  
  /end_session:
    get:
      tags:
      - Session Management
      summary: End current session.
      description: End current session.
      operationId: end_session
      parameters:
        - name: id_token_hint
          in: query
          required: true
          description: Previously issued ID Token (id_token) passed to the logout endpoint as a hint about the End-User's current authenticated session with the Client. This is used as an indication of the identity of the End-User that the RP is requesting be logged out by the OP. The OP need not be listed as an audience of the ID Token when it is used as an id_token_hint value.
          schema:
            type : string
        - name: post_logout_redirect_uri
          in: query
          description: URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout.         
          schema:
            type : string
        - name: state
          in: query
          description: Opaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP.
          schema:
            type : string            
        - name: session_id
          in: query
          description: Session Id
          schema:
            type : string 
      responses:
        200:
          description: OK
          content: {}                         
        302:
          $ref: '#/components/responses/Found'        
        400:
          $ref: '#/components/responses/InvalidRequest'
        500:
         $ref: '#/components/responses/InternalServerError'           
  /token:
    post:
      tags:
      - Token
      summary: To obtain an Access Token, an ID Token, and optionally a Refresh Token, the RP (Client).
      description: To obtain an Access Token, an ID Token, and optionally a Refresh Token, the RP (Client).
      operationId: post-token 
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - grant_type
              properties:
                grant_type:
                  type : string
                  description: Grant type value, one of these - authorization_code, implicit, password, client_credentials, refresh_token as described in OAuth 2.0 [RFC6749].
                code:
                  type : string
                  description: Code which is returned by authorization endpoint. (For grant_type=authorization_code.
                redirect_uri:
                  type : string
                  description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider.
                username:
                  type : string
                  description: End-User username.
                password:
                  type : string
                  description: End-User password.
                scope:
                  type : string
                  description: OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.
                assertion:
                  type : string
                  description: Assertion.
                refresh_token:
                  type : string
                  description: Refresh token.
                client_id:
                  type : string
                  description: OAuth 2.0 Client Identifier valid at the Authorization Server.
                client_secret:
                  type : string
                  description: The client secret.  The client MAY omit the parameter if the client secret is an empty string.
                code_verifier:
                  type : string
                  description: The client's PKCE code verifier.
                ticket:
                  type : string
                  #description:
                claim_token:
                  type : string
                  #description: 
                claim_token_format:
                  type : string
                  #description: 
                pct:
                  type : string
                  #description:
                rpt:
                  type : string
                  #description:                  
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: AccessToken.
                properties:
                  tknCde:
                    type: string
                    example: 
                    description: Token code
                  iat:
                    type: string
                    format: date
                    example: 
                    description: Creation Date of the token.
                  exp:
                    type: string
                    format: date
                    description: Expiry Date of the token.
                  del:
                    type: boolean
                    description: Token deletion flag. Default value is true.
                  amr:
                    type: string
                    example: 
                    description: Authentication mode.
                  ssnId:
                    type: string
                    example: 
                    description: Session DN(Distinguished Name).
                  x5ts256:
                    type: string
                    description: Certificate encryption strategy
        400:
          $ref: '#/components/responses/InvalidRequest'
        401:
          $ref: '#/components/responses/Unauthorized'          
        403:
          $ref: '#/components/responses/AccessDenied'
        500:
          $ref: '#/components/responses/InternalServerError' 
  /uma/gather_claims:
    get:
      tags:
      - UMA (User Managed Access)
      summary: UMA Claims Gathering Endpoint.
      description: UMA Claims Gathering Endpoint.
      operationId: get-uma-gather_claims
      parameters:
        - name: client_id
          in: query
          schema:
            type : string
        - name: ticket
          in: query
          schema:
            type : string
        - name: claims_redirect_uri
          in: query
          schema:
            type : string            
        - name: state
          in: query
          schema:
            type : string 
        - name: reset
          in: query
          schema:
            type : boolean
        - name: authentication
          in: query
          schema:
            type : boolean
      responses:
        302:
          $ref: '#/components/responses/Found'  
        400:
          $ref: '#/components/responses/InvalidRequest'
        500:
          $ref: '#/components/responses/InternalServerError' 
    post:
      tags:
      - UMA (User Managed Access)
      summary: UMA Claims Gathering Endpoint
      description: UMA Claims Gathering Endpoint
      operationId: post-uma-gather_claims
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object              
              properties:                
                client_id:
                  type : string                  
                ticket:
                    type : string
                claims_redirect_uri:
                    type : string            
                state:
                    type : string 
                reset:
                    type : boolean
                authentication:
                    type : boolean
      responses:
        302:
          $ref: '#/components/responses/Found'  
        400:
          $ref: '#/components/responses/InvalidRequest'
        500:
          $ref: '#/components/responses/InternalServerError' 
  /uma2-configuration:
    get:
      tags:
      - UMA (User Managed Access)
      summary: Gets UMA configuration data.
      description: Gets UMA configuration data.
      operationId: uma2-configuration    
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: UmaMetadata
                required:
                - permission_endpoint
                - resource_registration_endpoint
                - scope_endpoint
                properties:
                  claims_interaction_endpoint:
                    type: string
                    example: 
                    description: Static endpoint URI at which the authorization server declares that it interacts with end-user requesting parties to gather claims. If the authorization server also provides a claims interaction endpoint URI as part of its redirect_user hint in a need_info response to a client on authorization failure (see Section 3.3.6), that value overrides this metadata value. Providing the static endpoint URI is useful for enabling interactive claims gathering prior to any pushed-claims flows taking place, so that, for example, it is possible to gather requesting party authorization interactively for collecting all other claims in a \"silent\" fashion.
                  uma_profiles_supported:
                    type: array
                    format: date
                    example: 
                    description: UMA profiles supported by this authorization server. The value is an array of string values, where each string value is a URI identifying an UMA profile.
                    items:
                      type: string
                  permission_endpoint:
                    type: string
                    description: The endpoint URI at which the resource server requests permissions on the client's behalf.
                  resource_registration_endpoint:
                    type: string
                    description: The endpoint URI at which the resource server registers resources to put them under authorization manager protection.
                  scope_endpoint:
                    type: string
                    description: The Scope endpoint URI.                  
        500:
          $ref: '#/components/responses/InternalServerError' 
  /host/rsrc_pr:
    post:
      tags:
      - UMA (User Managed Access)
      summary: Registers permission.
      description: Registers permission.
      operationId: host-rsrc_pr
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - requestAsString
              properties:
                requestAsString:
                  type : string
                  description: The identifier for a resource to which this client is seeking access. The identifier MUST correspond to a resource set that was previously registered.
                Authorization:
                  type : string
                  description: Client Authorization details that contains the access token along with other details.           
      responses:
        201: #CREATED
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Client PermissionTicket object.
                properties:
                  ticket:
                    type: string                                       
        500:
          $ref: '#/components/responses/InternalServerError'  
  /host/rsrc/resource_set:
    post:
      tags:
      - UMA (User Managed Access)
      summary: Adds a new resource description.
      description: Adds a new resource description.
      operationId: post-host-rsrc-resource_set
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UmaResource' 
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                title: UmaResourceResponse
                description: UmaResourceResponse Resource created.
                type: object
                required:
                - id                
                properties:
                  id:
                    type: string                                       
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
      - UMA (User Managed Access)
      summary: Updates a previously registered resource.
      description: Updates a previously registered resource.
      operationId: put-host-rsrc-resource_set
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string
        - name: rsid
          in: path
          required: true
          description: Resource description ID.
          schema:
            type : string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UmaResource' 
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: UmaResourceResponse
                description: UmaResourceResponse
                type: object
                required:
                - id                
                properties:
                  id:
                    type: string                              
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
      - UMA (User Managed Access)
      summary: Lists all previously registered resource.
      description: Lists all previously registered resource.
      operationId: get-host-rsrc-resource_set
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string
        - name: scope
          in: query
          required: true
          description: Scope uri.
          schema:
            type : string      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                description: resource id.
        500:
         $ref: '#/components/responses/InternalServerError' 
    delete:
      tags:
      - UMA (User Managed Access)
      summary: Deletes a previously registered resource.
      description: Deletes a previously registered resource.
      operationId: delete-host-rsrc-resource_set
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string
        - name: rsid
          in: path
          required: true
          description: Resource description ID.
          schema:
            type : string      
      responses:
        204:
          description: OK
          content: {}                           
        500:
          $ref: '#/components/responses/InternalServerError'
  /host/rsrc/resource_set/{rsid}:
    get:
      tags:
      - UMA (User Managed Access)
      summary: Reads a previously registered resource.
      description: Reads a previously registered resource.
      operationId: get-host-rsrc-resource_set/{rsid}
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string
        - name: rsid
          in: path
          required: true
          description: Resource description ID.
          schema:
            type : string      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UmaResourceWithId'                              
        500:
          $ref: '#/components/responses/InternalServerError' 
    
  /rpt/status:
    get:
      tags:
      -  Token 
      summary: The Introspection OAuth 2 Endpoint for RPT.
      description: The Introspection OAuth 2 Endpoint for RPT.
      operationId: get-rpt-status
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string
        - name: token
          in: query
          required: true       
          schema:
            type : string
        - name: token_type_hint
          in: query
          required: true
          schema:
            type : string 
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: RptIntrospectionResponse
                $ref: '#/components/schemas/RptIntrospectionResponse'                  
        405:
          description: Introspection of RPT is not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
      - Token
      summary: The Introspection OAuth 2 Endpoint for RPT.
      description: The Introspection OAuth 2 Endpoint for RPT.
      operationId: post-rpt-status      
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - token
              - token_type_hint
              properties:
                token:
                  type : string
                  description: Client access token.
                token_type_hint:
                  type : string  
                  description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User.
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Client Authorization details that contains the access token along with other details.  
          schema:
            type : string             
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: RptIntrospectionResponse
                $ref: '#/components/schemas/RptIntrospectionResponse'                  
        405:
          description: Introspection of RPT is not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        500:
          $ref: '#/components/responses/InternalServerError' 
  /uma/scopes/icons:
    get:
      tags:
      - UMA (User Managed Access)
      summary: Provides UMA Scope Icon by scope id.
      description: Provides UMA Scope Icon by scope id.
      operationId: get-uma_scopes_icons
      parameters:
        - name: id
          in: path
          required: true
          description: Resource description ID.
          schema:
            type : string      
      responses:
        200:
          description: OK - redirects to the Scope Icon URL.
          content: {}
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /uma/scopes:
    get:
      tags:
      - UMA (User Managed Access)
      summary: Provides UMA Scope description by scope id.
      description: Provides UMA Scope description by scope id.
      operationId: get-uma_scopes
      parameters:
        - name: id
          in: path
          required: true
          description: Resource description ID.
          schema:
            type : string      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: UmaScopeDescription
                required:
                - name
                properties:
                  description:
                    type: string
                    description: A human-readable string describing the resource at length. The authorization server MAY use this description in any user interface it presents to a resource owner, for example, for resource protection monitoring or policy setting.
                  iconUri:
                    type: string
                    description: A URI for a graphic icon representing the scope. The referenced icon MAY be used by the authorization server in any user interface it presents to the resource owner.
                  name:  
                    type: string
                    description: A human-readable string describing some scope (extent) of access. This name MAY be used by the authorization server in any user interface it presents to the resource owner.                                      
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'    
  /userinfo:
    get:
      tags:
      - User Info
      summary: Returns Claims about the authenticated End-User.
      description: Returns Claims about the authenticated End-User.
      operationId: get-userinfo
      parameters:
        - name: access_token
          in: query
          required: true
          description: OAuth 2.0 Access Token.
          schema:
            type : string 
        - name: Authorization
          in: header
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string 
      responses:
        200:
          description: OK
          content:
            application/jwt:
              schema:
                title: User Claims details
                required:
                - KeyEncryptionAlgorithm
                - BlockEncryptionAlgorithm
                - User
                - AuthorizationGrant
                properties:
                  KeyEncryptionAlgorithm:
                    type: string
                    description: Key Encryption Algorithm.                    
                  BlockEncryptionAlgorithm:
                    type: string
                    description: Block Encryption Algorithm.
                  User:  
                    type: object
                    description: User details.
                    items:
                      $ref: '#/components/schemas/User'  
                  AuthorizationGrant:  
                    type: object
                    description: User Grant details.
                  scopes:
                    type: array
                    items:
                      type: string 
        400:
          $ref: '#/components/responses/InvalidRequest'          
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/AccessDenied'        
        500:
          $ref: '#/components/responses/InternalServerError'  
    post:
      tags:
      - User Info
      summary: Returns Claims about the authenticated End-User.
      description: Returns Claims about the authenticated End-User.
      operationId: post-userinfo
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
              - access_token
              properties:
                access_token:
                  type : string
                  description: OAuth 2.0 Access Token. 
      parameters:      
        - name: Authorization
          in: header
          description: Client Authorization details that contains the access token along with other details.
          schema:
            type : string       
      responses:
        200:
          description: OK
          content:
            application/jwt:
              schema:
                title: User Claims details
                required:
                - KeyEncryptionAlgorithm
                - BlockEncryptionAlgorithm
                - User
                - AuthorizationGrant
                properties:
                  KeyEncryptionAlgorithm:
                    type: string
                    description: Key Encryption Algorithm.                    
                  BlockEncryptionAlgorithm:
                    type: string
                    description: Block Encryption Algorithm.
                  User:  
                    type: object
                    description: User details.
                    items:
                      $ref: '#/components/schemas/User'  
                  AuthorizationGrant:  
                    type: object
                    description: User Grant details.
                  scopes:
                    type: array
                    items:
                      type: string 
        400:
          $ref: '#/components/responses/InvalidRequest'          
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/AccessDenied'        
        500:
          $ref: '#/components/responses/InternalServerError'
  /fido/u2f/authentication:
    get:
      tags:
      - FIDO U2F
      summary: Performs FIDO U2F authentication of end-user.
      description: Performs FIDO U2F authentication of end-user.
      operationId: fido-u2f-authentication
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type : string 
        - name: keyhandle
          in: query
          schema:
            type : string
          description: Websafe-base64 encoding of the key handle obtained from the U2F token during registration.            
        - name: application
          in: query
          description: The application id that the RP would like to assert.
          schema:
            type : string         
        - name: session_id
          in: query
          schema:
            type : string         
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateRequestMessage'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'        
        500:
          $ref: '#/components/responses/InternalServerError'
  /fido-configuration:
    get:
      tags:
      - FIDO U2F
      summary: Performs FIDO configuration data.
      description: Performs FIDO configuration data.
      operationId: fido-configuration  
      parameters:
      - name: username
        in: query
        required: true
        schema:
          type : string 
      - name: application
        in: query
        description: The application id that the RP would like to assert.
        schema:
          type : string  
      - name: session_id
        in: query
        schema:
          type : string 
      - name: enrollment_code
        in: query
        schema:
          type : string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/U2fConfiguration'
        403:
          $ref: '#/components/responses/AccessDenied'   
        500:
          $ref: '#/components/responses/InternalServerError'
  /fido/u2f/registration:
    get:
      tags:
      - FIDO U2F
      summary: Endpoint for U2F device start registration process.
      description: Endpoint for U2F device start registration process.
      operationId: fido-u2f-registration     
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/U2fConfiguration'
        403:
          $ref: '#/components/responses/AccessDenied' 
        406:
          $ref: '#/components/responses/NotAcceptable'        
        500:
          $ref: '#/components/responses/InternalServerError'  
  /fido2/assertion/options:
    post:
      tags:
      - FIDO2
      summary: Performs FIDO2 authentication of the users.
      description: Performs FIDO2 authentication of the users.
      operationId: options  
      requestBody:
        content:
          application/json:
            schema:
              title: content
              required:
              - content
              type: object
              properties:
                content:
                  type: string
                  description: Set of parameters required for FIDO2 option assertion.
                  example: username, authenticatorSelection, documentDomain, extensions, etc.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: assertionOptionsResponseNode
                required:
                - challenge
                - user
                - allowCredentials
                - userVerification
                - extensions
                type: object
                properties:
                  challenge:
                    type: string
                    description: Websafe-base64 encoding of the challenge.
                  user:
                    type: object
                    description: User object
                    required:
                    - name
                    properties:
                      name:
                        type: string
                  allowCredentials:
                    type: array
                    items:
                      type: string
                      description: Credentials like public-key, transports
                  userVerification:
                    type: string
                  extensions:
                    type: string
        403:
          $ref: '#/components/responses/AccessDenied' 
        500:
          $ref: '#/components/responses/InternalServerError'
  /fido2/assertion/result:
    post:
      tags:
      - FIDO2
      summary: Performs FIDO2 authentication of the users.
      description: Endpoint for U2F device start registration process.
      operationId: result  
      requestBody:
        content:
          application/json:
            schema:
              title: content
              required:
              - content
              type: object
              properties:
                content:
                  type: string
                  description: Set of parameters required for FIDO2 authentication.
                  example: id, type, rawId, userHandle, challenge, origin.
      responses:
        200:
          description: OK
          content: {}
        403:
          $ref: '#/components/responses/AccessDenied'
  /fido2/attestation/options:
    post:
      tags:
      - FIDO2
      summary: Created new registration.
      description: Created new registration.
      operationId: post-options  
      requestBody:
        content:
          application/json:
            schema:
              title: content
              required:
              - content
              type: object
              properties:
                content:
                  type: string
                  description: Set of parameters required for FIDO2 option assertion.
                  example: username, displayName, documentDomain, authenticatorSelection, etc.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: credential
                required:
                - challenge
                - rp
                - user
                - attestation
                - pubKeyCredParams
                - authenticatorSelection
                - excludeCredentials
                - extensions
                type: object
                properties:
                  challenge:
                    type: string
                    description: Websafe-base64 encoding of the challenge.
                  rp:
                    type: object
                    description: RP credentials
                    required:
                    - name
                    - id
                    properties:
                      name:
                        type: string
                      id:
                        type: string
                  user:
                    type: object
                    description: User object
                    required:
                    - id
                    - name
                    - displayName
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      displayName:
                        type: string
                  attestation:
                     type: string
                     format: enum                     
                  pubKeyCredParams:
                    type: array
                    items:
                      type: string
                      description: Credentials like public-key, type, alg 
                  authenticatorSelection:
                    type: string
                  excludeCredentials:
                   type: object
                   description: Fido2RegistrationEntry

        403:
          $ref: '#/components/responses/AccessDenied' 
        500:
          $ref: '#/components/responses/InternalServerError'
  
          
components: 
  responses:
    Found: #302 - FOUND
      description: Resource Found. 
      content: {}
    InvalidRequest: #400 - BAD_REQUEST
      description: Invalid parameters are provided to endpoint. 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'  
    Unauthorized: #401 - UNAUTHORIZED
      description: Unauthorized access request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    AccessDenied: #403 - FORBIDDEN
          description: Invalid details provided hence access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    NotFound: #404 - NOT_FOUND
          description: Resource Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    NotAcceptable: #406 - NOT_ACCEPTABLE
          description: Request Not Acceptable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    InternalServerError: #500 - INTERNAL_SERVER_ERROR
      description: Internal error occured. Please check log file for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
     
  schemas:  
    ErrorResponse:
      required:
      - error
      - error_description
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
        details:
          type: string
    ClientInfoResponse:
      type: object
      properties:
        displayName:
          type: string
        inum:
          type: string
          description: XRI i-number
        oxAuthAppType:
          type: string
          description: oxAuth Appication type
        oxAuthIdTokenSignedResponseAlg:
          type: string
          description: oxAuth ID Token Signed Response Algorithm
        oxAuthRedirectURI:
          type: array
          description: Array of redirect URIs values used in the Authorization
          items: 
            type: string
        oxId:
          type: string
          example: 
          description: oxAuth Attribute Scope Id   
        custom_attributes:
          type: array
          items:
            type: string
          description: Array of custom attribute of client.
                    

    
    
        
    RptIntrospectionResponse:
      required:
      - active
      - expiresAt
      - issuedAt
      - nbf
      - clientId 
      - sub 
      - aud 
      - iss 
      - jti 
      - permissions 
      - pctClaims
      type: object
      properties:
        active:
          type: string
        expiresAt:
          type: integer   
        issuedAt:
          type: integer   
        nbf:
          type: integer   
        clientId:
          type: string   
        sub:
          type: string   
        aud:
          type: string   
        iss:
          type: string   
        jti:
          type: string   
        permissions:
          type: array
          items:
            type: object
            description: Provide the list of UmaPermission objects.           
        pctClaims:
          type: object
          additionalProperties:
            type: string
            description: specifies PCT claim map.           
    ClientResponse:
      required:
      - dn
      - inum
      - isDeletable
      - oxAuthClientSecret
      - tknBndCnf
      - oxAuthClientIdIssuedAt
      - oxAuthClientSecretExpiresAt
      - expirationDate
      - displayName
      - oxLastAccessTime
      - oxLastLogonTime
      - oxPersistClientAuthorizations
      type: object
      properties:
        dn:
          type: string
        inum:
          type: string
        isDeletable:
          type: boolean
        oxAuthClientSecret:
          type: string
        oxAuthRegistrationAccessToken:
          type: string
        tknBndCnf: 
          type: string
        oxAuthClientIdIssuedAt:
          type: object
        oxAuthClientSecretExpiresAt:
          type: object
        expirationDate:
          type: object
        displayName:
          type: string
        oxLastAccessTime:
          type: object
        oxLastLogonTime:
          type: object
        oxPersistClientAuthorizations:
          type: boolean
    UmaResource:
      description: The resource server defines a resource set that the authorization server needs to be aware of by registering a resource set description at the authorization server. This registration process results in a unique identifier for the resource set that the resource server can later use for managing its description.
      required:
      - iat
      - exp
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
        scopeExpression:
          type: string
        description:
          type: string
          description: A human-readable string describing the resource 
        iconUri:
          type: string
          description: A human-readable string describing the resource 
        name:
          type: string
        type:
          type: string
          description: A string uniquely identifying the semantics of the resource set.
        iat:
          type: integer
          description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this resource was originally issued.
        exp:
          type: integer
          description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this resource will expire.
    UmaResourceWithId:
      description: Resource that needs protection by registering a resource description
      allOf:
      - $ref: '#/components/schemas/UmaResource' #Has all the properties of UmaResource
      required:
      - _id
      - exp
      type: object
      properties:
        id:
          type: string
    AuthenticateRequest:
      description: FIDO U2F device authentication request.
      required:
      - version
      - challenge
      - appId
      - keyHandle
      type: object
      properties:
        version:
          type: string
          description: Version of the protocol that the to-be-registered U2F token must speak.
          example: U2F_V2
        challenge:
          type: string
          description: The websafe-base64-encoded challenge.        
        appId:
          type: string
          description: The application id that the RP would like to assert.
        keyHandle:
          type: string
          description: Websafe-base64 encoding of the key handle obtained from the U2F token during registration.    
    AuthenticateRequestMessage:
      description: FIDO U2F device authentication request message.
      #allOf:
      #- $ref: '#/components/schemas/AuthenticateRequest' #Has all the properties of AuthenticateRequest
      required:
      - authenticateRequests
      properties:
        authenticateRequests:
          type: array
          items: 
            $ref: '#/components/schemas/AuthenticateRequest'
    RegisterRequest:
      description: FIDO U2F device registration request.
      required:
      - version
      - challenge
      - appId
      type: object
      properties:
        version:
          type: string
          description: Version of the protocol that the to-be-registered U2F token must speak.
          example: U2F_V2
        challenge:
          type: string
          description: The websafe-base64-encoded challenge.        
        appId:
          type: string
          description: The application id that the RP would like to assert.
    RegisterRequestMessage:
      description: FIDO U2F registration request message.
      required:
      - authenticateRequests
      - registerRequests
      properties:
        authenticateRequests:
          type: array
          items: 
            $ref: '#/components/schemas/AuthenticateRequest' 
        registerRequests:
          type: array
          items: 
            $ref: '#/components/schemas/RegisterRequest'
    U2fConfiguration:
      description: FIDO U2F Configuration.
      required:
      - version
      - issuer
      properties:
        version:
          type: string
          description: The version of the FIDO U2F core protocol to which this server conforms. The value MUST be the string 1.0. 
        issuer:
          type: string
          description: A URI indicating the party operating the FIDO U2F server.
        registration_endpoint:
          type: string
        authentication_endpoint:
          type: string
    User:
      description: User details
      required:
        - attributeName
        - attributeValue
      properties:
        attributeName:
          type: string
        attributeValue:
          type: string
#   AuthorizationGrant:
#     description: Base class for all the types of authorization grant.
#     required:
#     - AppConfiguration
#     - ScopeChecker
#     - User
#     - AuthorizationGrantType
#     - Client
#     - scopes
#     - grantId
#     - JwtAuthorizationRequest
#     - authenticationTime
#     - TokenLdap
#     - AccessToken
#     - IdToken
#     - AuthorizationCode
#     - nonce
#     - codeChallenge
#     - codeChallengeMethod
#     - claims
#     - acrValues
#     - sessionDn
#     properties:
#       AppConfiguration:
#         type: object
#         items: 
#           $ref: '#/components/schemas/AppConfiguration'
#         description: AppConfiguration
#       ScopeChecker:
#         type: object
#         items: 
#           $ref: '#/components/schemas/ScopeChecker'
#         description: ScopeChecker
#       User:
#         type: object
#         items: 
#           $ref: '#/components/schemas/User'
#         description: User
#       AuthorizationGrantType:
#         type: object
#         items: 
#           $ref: '#/components/schemas/AuthorizationGrantType'
#         description: AuthorizationGrantType
#       Client:
#         type: object
#         items: 
#           $ref: '#/components/schemas/Client'
#         description: Client
#       scopes:
#         type: array
#         additionalProperties:
#           type: string
#       grantId:
#         type: string
#       JwtAuthorizationRequest:
#         type: object
#         items: 
#           $ref: '#/components/schemas/JwtAuthorizationRequest'
#         description: JwtAuthorizationRequest
#       authenticationTime: 
#         type: string 
#         format: date
#       TokenLdap:
#         type: object
#         items: 
#           $ref: '#/components/schemas/TokenLdap'
#         description: TokenLdap
#       AccessToken:
#         type: object
#         items: 
#           $ref: '#/components/schemas/AccessToken'
#         description: AccessToken
#       IdToken:
#         type: object
#         items: 
#           $ref: '#/components/schemas/IdToken'
#         description: IdToken
#       AuthorizationCode:
#         type: object
#         items: 
#           $ref: '#/components/schemas/AuthorizationCode'
#         description: AuthorizationCode
#       nonce:
#         type: string 
#       codeChallenge:
#         type: string 
#       codeChallengeMethod:
#         type: string 
#       claims:
#         type: string 
#       acrValues:
#         type: string 
#       sessionDn:
#         type: string 
    Fido2RegistrationEntry:
      description: FIDO U2F Configuration.
      required:
      - oxPublicKeyId
      - displayName
      - oxRegistrationData
      - oxStatus
      - oxDeviceNotificationConf
      properties:
        oxPublicKeyId:
          type: string
        displayName:
          type: string
        oxRegistrationData:
          type: string
        oxStatus:
          type: string
        oxDeviceNotificationConf:
          type: string
    Fido2RegistrationData:
      description: Fido2RegistrationData
      required:
      - username
      - domain
      - userId
      - challenge
      - w3cCredentialCreationOptions
      - w3cAuthenticatorAttenstationResponse
      - uncompressedECPoint
      - publicKeyId
      - type
      - attestationType
      - status
      - counter
      - signatureAlgorithm
      properties:
        username:
          type: string
        domain:
          type: string 
        userId:
          type: string 
        challenge:
          type: string 
        w3cCredentialCreationOptions:
          type: string 
        w3cAuthenticatorAttenstationResponse:
          type: string 
        uncompressedECPoint:
          type: string 
        publicKeyId:
          type: string 
        type:
          type: string 
        attestationType:
          type: string 
        status:
          type: object
        counter:
          type: integer
        signatureAlgorithm:
          type: integer        
         
        
          
    
  
  
      
            
  
            
